/** @file
        @brief Header providing converters between osgLua and Luabind.

        @date 2009-2014

        @author
        Ryan Pavlik
        <rpavlik@iastate.edu> and <abiryan@ryand.net>
        http://academic.cleardefinition.com/
        Iowa State University Virtual Reality Applications Center
        Human-Computer Interaction Graduate Program
*/

//          Copyright Iowa State University 2014.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef INCLUDED_osgLuabind_h_GUID_f4dc2e8a_e5aa_478d_af38_ec2887bd0023
#define INCLUDED_osgLuabind_h_GUID_f4dc2e8a_e5aa_478d_af38_ec2887bd0023

// Internal Includes
#include <osgLua/Value>
#include <osgLua/introspection/variant_cast>

// Library/third-party includes
#include <luabind/luabind.hpp>

#include <osg/Object>
#include <osg/ref_ptr>

#include <boost/utility/enable_if.hpp>
#include <boost/type_traits/is_base_of.hpp>
#include <boost/type_traits/is_const.hpp>
#include <boost/mpl/and.hpp>
#include <boost/mpl/not.hpp>

// Standard includes
#ifdef BUILD_OSGLUABIND_VERBOSE
#include <iostream>
#define OSGLUABIND_VERBOSE(X)                                                  \
    std::cout << "[osgLua/osgLuaBind:" << __LINE__ << "] " << X << std::endl
#else
#define OSGLUABIND_VERBOSE(X)
#endif

// lua_State is a commonly-passed incomplete type: let Boost know it's never
// derived from anything.
#include <boost/type_traits/detail/bool_trait_def.hpp>
namespace boost {
    BOOST_TT_AUX_BOOL_TRAIT_PARTIAL_SPEC2_1(typename T, is_base_and_derived, T,
                                            lua_State, false)
    template <typename T> static T *get_pointer(osg::ref_ptr<T> const &ptr) {
        return ptr.get();
    }
}
#include <boost/type_traits/detail/bool_trait_undef.hpp>

namespace luabind {
    namespace detail {
        // Convenience typedef for the root of the OSG referenced object class
        // hierarchy.
        typedef ::osg::Object osg_ref_base_t;

        /// Type-dispatched function for determine the score possible by
        /// casting. Default version is for value types.
        template <typename T> struct osglua_casting_score_for_type {
            typedef T target_t;

            static int get(osgLua::Value *v) {
                try {
                    osgLua::introspection::variant_cast<target_t>(v->get());
                }
                catch (...) {
                    /// @todo make this catch only osgIntrospection exceptions
                    return -1;
                }
                OSGLUABIND_VERBOSE("Convertible match for type.");
                return 0;
            }
        };

        /// Partial specialization of casting score computation for referenced
        /// object types
        template <typename T> struct osglua_casting_score_for_type<T *> {
            typedef T *target_t;

            static int get(osgLua::Value *v) {
                if (osgLua::introspection::variant_cast<target_t>(v->get()) !=
                    NULL) {
                    if (osgLua::introspection::requires_conversion<target_t>(
                            v->get())) {
                        OSGLUABIND_VERBOSE("Convertible match for type.");
                        return 0;
                    } else {
                        OSGLUABIND_VERBOSE("Polymorphic match for type.");
                        return 1;
                    }
                }
                return -1;
            }
        };

        /// Template function for shared score computation (both value and
        /// reference) - uses a type-dispatched partial specialized function
        /// for the "inner section" that differs between value and reference.
        template <typename T>
        static int compute_osglua_score_for_type(lua_State *L, int index) {
            using osgLua::introspection::Type;
            using osgLua::introspection::Reflection;
            osgLua::Value *v = osgLua::Value::get(L, index);
            if (!v) {
                OSGLUABIND_VERBOSE("Not a osgLua object");
                return -1;
            }
            static const Type &destType =
                Reflection::getType(extended_typeid<T>());
            const Type &type = v->get().getType();
            OSGLUABIND_VERBOSE(
                "Source type: " << v->get().getType().getQualifiedName());
            OSGLUABIND_VERBOSE("Target type: " << destType.getQualifiedName());
            try {
                if (type == destType) {
                    OSGLUABIND_VERBOSE("Exact match for type!");
                    return 2;
                } else {
                    return osglua_casting_score_for_type<T>::get(v);
                }
            }
            catch (...) {
                /// @todo make this catch only osgIntrospection exceptions
                return -1;
            }
            return -1;
        }

        /// Traits template for determining the luabind passing style type based
        /// on the type of container (raw pointer or ref_ptr)
        template <typename T> struct osglua_passing_style;

        template <typename T> struct osglua_passing_style<T *> {
            typedef detail::by_pointer<T> type;
        };

        template <typename T> struct osglua_passing_style< ::osg::ref_ptr<T> > {
            typedef detail::by_value< ::osg::ref_ptr<T> > type;
        };
    } // end of namespace detail

    /// Base class for converting osg referenced types in C++/luabind to/from
    /// osgLua values
    template <typename OSG_QUALIFIED_TYPENAME,
              typename CONTAINER_TYPENAME = OSG_QUALIFIED_TYPENAME *>
    struct osglua_ref_converter_base
        : native_converter_base<CONTAINER_TYPENAME> {
        typedef OSG_QUALIFIED_TYPENAME *raw_ptr_t;
        typedef osg::ref_ptr<OSG_QUALIFIED_TYPENAME> ref_ptr_t;
        typedef CONTAINER_TYPENAME container_t;

        /// Compute type matching score for signature matching and overload
        /// resolution
        static int compute_score(lua_State *L, int index) {
            return detail::compute_osglua_score_for_type<raw_ptr_t>(L, index);
        }

        /// Accept in C++ from Lua
        raw_ptr_t from(lua_State *L, int index) {
            osgLua::Value *v = osgLua::Value::get(L, index);
            if (!v) {
                return NULL;
            }
            return osgLua::introspection::variant_cast<raw_ptr_t>(v->get());
        }

        /// Transition C++ to Lua
        void to(lua_State *L, container_t const &x) {
            osgLua::Value::push(L, get_pointer(x));
        }

        /// @name Extra required methods for converter
        /// I think these are not provided by the native_converter_base in
        /// luabind because that library assumes that you won't make a converter
        /// for pointer types.
        /// These are minimal forwarding functions in any case.
        /// @{
        raw_ptr_t
        apply(lua_State *L,
              typename detail::osglua_passing_style<container_t>::type &,
              int index) {
            return from(L, index);
        }

        void apply(lua_State *L, container_t const &value) { to(L, value); }

        int match(lua_State *L,
                  typename detail::osglua_passing_style<container_t>::type,
                  int index) {
            return compute_score(L, index);
        }
        /// @}
    };

    /// Base class for converting osg value types in C++/luabind to/from osgLua
    /// values
    template <typename OSG_QUALIFIED_TYPENAME>
    struct osglua_val_converter_base
        : native_converter_base<OSG_QUALIFIED_TYPENAME> {
        typedef OSG_QUALIFIED_TYPENAME value_t;

        /// Compute type matching score for signature matching and overload
        /// resolution
        static int compute_score(lua_State *L, int index) {
            return detail::compute_osglua_score_for_type<value_t>(L, index);
        }

        /// Accept in C++ from Lua
        value_t from(lua_State *L, int index) {
            osgLua::Value *v = osgLua::Value::get(L, index);
            if (!v) {
                return value_t();
            }
            return osgLua::introspection::variant_cast<value_t>(v->get());
        }

        /// Transition C++ to Lua
        void to(lua_State *L, value_t const &x) { osgLua::Value::push(L, x); }
    };
}

namespace osgLuabind {

    using boost::enable_if;
    using boost::mpl::and_;
    using boost::mpl::or_;
    using boost::mpl::not_;
    using boost::mpl::apply;
    using boost::true_type;
    using boost::false_type;
    using boost::is_base_and_derived;
	using boost::is_const;

    // Convenience typedef for the root of the OSG referenced object class
    // hierarchy.
    typedef ::osg::Object osg_ref_base_t;

    /// Templated type trait: all types are assumed to
    /// not be OSG value types unless otherwise stated.
    template <typename T> struct IsValueType;

    /// User-specializable type trait to blacklist types that would otherwise
    /// get sucked up by osgLua
    /// Example: template<> struct Blacklist<CreationRecord> : boost::true_type
    /// {};
    template <typename T, typename = void> struct Blacklist : false_type {};

    /// Templated type trait: all types descending from osg::Object are
    /// assumed to be OSG Object types, unless they are blacklisted as above.
    template <typename T>
    struct IsObjectType
        : and_<typename not_<typename Blacklist<T>::type>::type,
               typename not_<typename is_const<T>::type>::type,
               typename is_base_and_derived<osg_ref_base_t, T>::type> {};

} // end of namespace osgLuabind

//-- Object/Reference Types --//
namespace luabind {

    /// Raw pointers to OSG object types
    /// should be converted as osgLua reference objects
    template <typename T>
    struct default_converter<T *,
                             typename boost::enable_if<osgLuabind::IsObjectType<
                                 T> >::type> : osglua_ref_converter_base<T> {};

    /// Anything held in an osg::ref_ptr and an OSG object type should be
    /// converted as an osgLua reference object
    template <typename T>
    struct default_converter<
        ::osg::ref_ptr<T>,
        typename boost::enable_if<osgLuabind::IsObjectType<
            T> >::type> : osglua_ref_converter_base<T, ::osg::ref_ptr<T> > {};

    namespace detail {
        /// Shared template function for looking up a type name string in
        /// osgIntrospection and pusing it onto the lua stack.
        template <typename T> struct osglua_type_to_string {
            static void push(lua_State *L) {
                using osgLua::introspection::Type;
                using osgLua::introspection::Reflection;
                static const Type &destType =
                    Reflection::getType(extended_typeid<T>());
                lua_pushstring(L, destType.getQualifiedName().c_str());
            }
        };

        /// type_to_string partial specialization for types inheriting from
        /// luabind::detail::osg_ref_base_t includes annotation mentioning
        /// osgLuaBind and type name from osgIntrospection.
        ///
        /// @note Luabind includes forwarding partial specializations to apply
        /// modifiers like *, &, and const, so no need to define those here.
        template <typename T>
        struct type_to_string<
			T, typename boost::enable_if<typename osgLuabind::IsObjectType<T>::type >::type> {
            static void get(lua_State *L) {
                lua_pushstring(L, "[osgLuaBind object] ");
                osglua_type_to_string<T>::push(L);
                lua_concat(L, 2);
            }
        };

        /// type_to_string partial specialization for types held in an
        /// osg::ref_ptr includes annotation mentioning osgLuaBind and
        /// type name from osgIntrospection, wrapped in osg::ref_ptr< and >.
        ///
        /// @note Luabind includes forwarding partial specializations to apply
        /// modifiers like *, &, and const, so no need to define those here.
        template <typename T>
        struct type_to_string<
            ::osg::ref_ptr<T>,
            typename boost::enable_if<osgLuabind::IsObjectType<T> >::type> {
            static void get(lua_State *L) {
                lua_pushstring(L, "[osgLuaBind object] osg::ref_ptr<");
                osglua_type_to_string<T>::push(L);
                lua_pushstring(L, ">");
                lua_concat(L, 3);
            }
        };
    }
}
//-- Value Types --//

namespace luabind {
    template <typename T> struct IsOSGValue : boost::false_type {};

    template <typename T> struct RemoveRefAndConst {
        typedef T type;
    };

    template <typename T>
    struct RemoveRefAndConst<T const> : RemoveRefAndConst<T> {};

    template <typename T>
    struct RemoveRefAndConst<T &> : RemoveRefAndConst<T> {};

    /// Types flagged as being OSG value types should be converted
    /// with the osglua value converter.
    template <typename T>
    struct default_converter<
        T, typename boost::enable_if<
               IsOSGValue<typename RemoveRefAndConst<T>::type> >::
               type> : osglua_val_converter_base<typename RemoveRefAndConst<T>::
                                                     type> {};

    namespace detail {

        /// Types flagged as being OSG value types get a human-readable
        /// name string from osgIntrospection with an annotation mentioning
        /// osgLuaBind.
        template <typename T>
        struct type_to_string<T,
                              typename boost::enable_if<IsOSGValue<T> >::type> {
            static void get(lua_State *L) {
                lua_pushstring(L, "[osgLuaBind value] ");
                osglua_type_to_string<T>::push(L);
                lua_concat(L, 2);
            }
        };
    }
}

#ifndef CREATE_OSGLUA_VALUE_CONVERTER

/// Macro to define traits to indicate to Luabind that a type is an osg value
/// type.
/// If you're binding a function/method/property that involves an OSG value type
/// not already mentioned at the bottom of this header, you'll need to use this
/// macro in your source file to tag the type you're using as an OSG value type.
/// Failing to do so will give you a weird error at runtime when trying to use
/// that bound item that reads something like "No matching overload found,
/// candidates: void functionname(custom [Z7osg...])"
#define CREATE_OSGLUA_VALUE_CONVERTER(T)                                       \
    namespace luabind {                                                        \
        template <> struct IsOSGValue<T> : boost::true_type {};                \
    }

/// Internal-use macro to forward declare and create value converter in one
/// step.
#define FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(NS, T)                         \
    namespace NS {                                                             \
        class T;                                                               \
    }                                                                          \
    CREATE_OSGLUA_VALUE_CONVERTER(NS::T)

/// @name Forward declaration and type trait tagging of common OSG value types.
///
/// To bind something using one of these types, you'll still need to include
/// that type's header, but forward declaration here keeps this header from
/// forcing every file using it to include lots of extra headers.
///
/// Any value types may be added here to make their converter available
/// automatically when including this file and the corresponding osg header. To
/// make a converter available without modifying this main header, use the
/// CREATE_OSGLUA_VALUE_CONVERTER macro.
///
/// @{

FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Matrixd);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Matrixf);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec2b);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec2d);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec2f);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec3b);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec3d);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec3f);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec3s);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec4b);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec4d);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec4f);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec4s);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Vec4ub);
FORWARD_DECL_AND_CREATE_VALUE_CONVERTER(osg, Quat);

/// @}

// Sorry, you probably shouldn't use this macro in your own files.
#undef FORWARD_DECL_AND_CREATE_VALUE_CONVERTER

#endif // ifndef CREATE_OSGLUA_VALUE_CONVERTER

#endif // INCLUDED_osgLuabind_h_GUID_f4dc2e8a_e5aa_478d_af38_ec2887bd0023
